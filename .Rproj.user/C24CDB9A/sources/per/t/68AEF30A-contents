# - **************************************************************************
#library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
#library(nnfor)
library(tseries)
library(timeSeries)
library(forecast)
library(xts)

# - **************************************************************************
# - ****************                                                **********
# - ****************    AutoRegressive Integrated Moving Average    **********
# - ****************                                                **********
# - **************************************************************************
# - **************************************************************************
# - **************************************************************************

# https://www.r-bloggers.com/forecasting-stock-returns-using-arima-model/
# 1. Differencing
# 2. Identification of p and q - use Autocorrelation function and PACF
#   2a. For AR models, ACF will dampen exponentially and PACF will id order (p) of AR model
#   2b. For MA models, PACF will dampen exponentially and ACF will id order (q) of MA process
# 3. 
# 4.
# 5.

stock_prices = getSymbols('TWTR', from=as.character(Sys.Date()-200),
                          to=as.character(Sys.Date()),
                          auto.assign = F)

stock = diff(log(stock_prices[,4]),lag=1)
stock = stock[!is.na(stock)]


plot(stock,type='l', main='log returns plot')


# Call ADF test on the returns series to check for stationarity
print(adf.test(stock))

# Split data - train test
breakpoint = floor(nrow(stock)*(2.9/3))
# Apply the ACF and PACF functions
par(mfrow = c(1,1))
acf.stock = acf(stock[c(1:breakpoint),], main='ACF Plot', lag.max=100)
pacf.stock = pacf(stock[c(1:breakpoint),], main='PACF Plot', lag.max=100)


Actual_series = xts(0,as.Date("2014-11-25","%Y-%m-%d"))
forecasted_series = data.frame(Forecasted = numeric())

# -- -- -- -- --  <<<<<<  testing ARIMA  >>>>>> -- -- -- -- -- -- #
# -- -- -- -- --  <<<<<<  testing ARIMA  >>>>>> -- -- -- -- -- -- #
# -- -- -- -- --  <<<<<<  testing ARIMA  >>>>>> -- -- -- -- -- -- #
fit = arima(stock,order = c(2, 0, 2),include.mean=FALSE)

summary(fit)
# --------- # For loop to forecast returns # --------- #

for (b in breakpoint:(nrow(stock)-1)){
    stock_train = stock[1:b, ]
    stock_test = stock[(b+1):nrow(stock), ]
    # Summary of the ARIMA model using the determined (p,d,q) parameters
    fit = arima(stock_train, order = c(2, 0, 2),include.mean=FALSE)
    summary(fit)
    
    # plotting a acf plot of the residuals
    acf(fit$residuals,main="Residuals plot")
    
    # Forecasting the log returns
    arima.forecast = forecast(fit, h = 1,level=99)
    summary(arima.forecast)
    
    # plotting the forecast
    par(mfrow=c(1,1))
    plot(arima.forecast, main = "ARIMA Forecast")
    
    # Creating a series of forecasted returns for the forecasted period
    forecasted_series = rbind(forecasted_series,arima.forecast$mean[1])
    colnames(forecasted_series) = c("Forecasted")
    
    # Creating a series of actual returns for the forecasted period
    Actual_return = stock[(b+1),]
    Actual_series = c(Actual_series,xts(Actual_return))
    rm(Actual_return)
    
    print(stock_prices[(b+1),])
    print(stock_prices[(b+2),])
    
}



# - **************************************************************************
# - ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  END ARIMA
# - **************************************************************************



# - **************************************************************************
# - **********************                                          **********
# - **********************    FB Prophet and metrics exploration    **********
# - **********************                                          **********
# - **************************************************************************
# - **************************************************************************
# - **************************************************************************

# x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11')
# symbols <- c('NKE','SPOT','TWTR', 'XOM', 'NVDA', 'TER', 'BAC')
# # AAPL_f = getFinancials('AAPL')
# getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
# getSymbols('BAC', from = '2001-01-01', auto.assign = TRUE)
# getSymbols('NVDA', from = '1990-01-01', auto.assign = TRUE)

#------------------------------------------------------------------------------------ /
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
    symbol = getSymbols(symbol, from = from, auto.assign = F)
    df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol)) 
    dfs = df[,c(1,4)]
    colnames(dfs) = c('ds','y')
    m = prophet(dfs)
    future = make_future_dataframe(m, periods = 720)
    forecast <- predict(m, future)
    the_list = list(m, forecast, dfs, symbol)
    return(the_list)
}


#------------------------------------------------------------------------------------ \
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('NVDA', '2015-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]] 
stock = x[[4]]

plot(m,forecast)
ggp = ggplot(forecast, aes(x = ds, y=trend))+
    geom_line(stat = 'identity') +
    geom_point(data = dfs, aes(x = ds, y = y))
ggplotly(ggp)

# ------------- TEST - - - TEST - - - TEST ---------- ### ------------- TEST - - - TEST - - - TEST ---------- ##
# ------------------------------------------------------------------------------------------------------------##
# ------------- TEST - - - TEST - - - TEST QUANTMOD LIBRARY EXPLORE FXs TEST - - - TEST - - - TEST ---------- ##
# ------------------------------------------------------------------------------------------------------------##
# ------------- TEST - - - TEST - - - TEST ---------- ### ------------- TEST - - - TEST - - - TEST ---------- ##

#List of fundamentals available
yahooQF()

AAPL_Qt = getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Earnings/Share")))

AAPL_Qt = getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Earnings/Share", 
                                            "P/E Ratio", "Book Value", "EBITDA", 
                                            "Price/Book")))

j = getQuote("AAPL", what = yahooQF(c("symbol", "Name (Long)", "Book Value")))

# ___________________________________________________________________________________ #
# !! BELOW doesn't work because "Last Trade (Price Only)" is not included %#%#% < < < #
#AAPL_Qt = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)")))

t = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)", "Last Trade (Price Only)"))
)

#  ---------------------------------  NEW METRICS  ---------------------------------- #
# ----------------------------------------------------------------------------------- #

t = getQuote("BRK", what = yahooQF(c("Market Capitalization", "Last Trade (Price Only)"))
)


x = t$Last/t$`Market Capitalization`




# # # Function to calculate metric

pmetric = function(stock_symbol){
    t = getQuote(stock_symbol, what = yahooQF(c("Market Capitalization", 
                                                "Last Trade (Price Only)")))
    x = t$`Last`/(t$`Market Capitalization`/100000000)
    }


j = pmetric('AAPL')


# --------------------------------^^^^^^^^^^^^^^^^^^--------------------------------- #


