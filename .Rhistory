runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp()
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
library(shiny)
runApp('stockprophet')
runApp()
runApp()
runApp('stockprophet')
runApp('stockprophet')
runApp()
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
library(quantmod)
yahooQF()
shiny::runApp('stockprophet')
yahooQF()
runApp('stockprophet')
runApp('stockprophet')
runApp()
runApp()
runApp('stockprophet')
runApp('stockprophet')
library(shiny)
runApp('stockprophet')
runApp()
runApp()
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
install.packages('shinydashboard')
library(shiny)
library(shinydashboard)
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
#------------------------------------------------------------------------------------ /
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
symbol = getSymbols(symbol, from = from, auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs, symbol)
return(the_list)
}
#------------------------------------------------------------------------------------ /
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
symbol = getSymbols(symbol, from = from, auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs, symbol)
return(the_list)
}
#------------------------------------------------------------------------------------ \
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('NVDA', '2015-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
View(stock)
rm(list=ls())
shiny::runApp('stockprophet')
j = getQuote("AAPL", what=yahooQF(c("Name (Long)")))
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
j = getQuote("AAPL", what=yahooQF(c("Name (Long)")))
j = getQuote("AAPL", what=yahooQF("Name (Long)"))
j = getQuote("AAPL", what = yahooQF("Name (Long)"))
AAPL_Qt = getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Earnings/Share")))
j = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)"))
j = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)")))
j = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)")))
#List of fundamentals available
yahooQF()
#List of fundamentals available
yahooQF()
#List of fundamentals available
yahooQF()
j = getQuote("AAPL", what = yahooQF(c("symbol", "longName")))
View(j)
j = getQuote("AAPL", what = yahooQF(c("symbol", "NameLong")))
View(j)
j = getQuote("AAPL", what = yahooQF(c("symbol", "Name (Long)")))
j = getQuote("AAPL", what = yahooQF(c("symbol", "Name (Long)", "Book Value")))
AAPL_Qt = getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Earnings/Share")))
AAPL_Qt = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)")))
View(AAPL_Qt)
AAPL_Qt = getQuote("TWTR", what = yahooQF(c("Symbol", "Name (Long)")))
AAPL_Qt = getQuote("TWTR", what = yahooQF(c("Symbol", "longName")))
AAPL_Qt = getQuote("TWTR", what = yahooQF(c("symbol", "longName")))
View(AAPL_Qt)
runApp('stockprophet')
shiny::runApp('stockprophet')
runApp()
runApp('stockprophet')
t = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)", "Last Trade (Price Only)",
"Earnings/Share",
"EPS Forward", "P/E Ratio", "Book Value", "EBITDA",
"Price/Book", "Percent Change From 50-day Moving Average",
"Percent Change From 200-day Moving Average"))
)
View(t)
AAPL_Qt = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)")))
t = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)", "Last Trade (Price Only)",
"Earnings/Share",
"EPS Forward", "P/E Ratio", "Book Value", "EBITDA",
"Price/Book", "Percent Change From 50-day Moving Average",
"Percent Change From 200-day Moving Average"))
)
t = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)", "Last Trade (Price Only)"))
)
View(t)
t = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)"))
)
View(t)
runApp('stockprophet')
shiny::runApp('stockprophet')
library(shinycssloaders)
runApp('stockprophet')
library(shinythemes)
runApp('stockprophet')
shinyUI(fluidPage(theme = shinytheme("superhero"),
div(tags$code('<.<.<. -------------------------- currently under development -------------------------- .>.>.>'),
titlePanel("Price Charting and FB Prophet Forecast for Stocks"),
helpText("For research only.  Not to be used for investment purposes."),
div(tags$i(tags$b('BETA')), align="center") ,
br(),
tags$code('<.<.<. -------------------------- currently under development -------------------------- .>.>.>'),
br(),br(), align="center"),
fluidRow(
column(width=3,
textInput("symb", "Symbol", "TWTR"),
selectInput("themeselection", "Choose chart theme:",
choices = c('Black chart theme'='black',
'White chart theme'='white',
'Beige chart theme'='beige'),
selected = 'black')
),
column(width=4,
dateRangeInput("dates",
"Date range",
start = "2018-01-01",
end = as.character(Sys.Date())),
# checkboxInput("forcheck", "Generate Forecast",
#                value = FALSE),
selectInput("charttype", "Choose chart type:",
choices = c('Auto'='auto',
'Line chart'='line',
'Candlesticks'='candlesticks',
'Matchsticks'='matchsticks',
'Bar chart'='bars'),
selected='auto')
),
column(width=3,offset = -0.5,
checkboxInput("log", "Plot y axis on log scale",
value = FALSE))
),
fluidRow(
column(width=4,
submitButton(text = "Apply Changes", icon = NULL, width = NULL)
)
),
fluidRow(
column(width=12,
h3(textOutput('symb_name')),
withSpinner(plotOutput("plot", height = "600px"))
)
),
fluidRow(
br(),
br(),
hr(),
br(),
column(width=12,
tags$b((textOutput('proph_label'))),
withSpinner(plotOutput("plot2", height = "600px"))
)
),
fluidRow(
column(width=10,
tableOutput('table1')
)
),
fluidRow(
column(width=12, align="center",
tags$code(' <.<.<. -------------------------- currently under development -------------------------- .>.>.>'),
br(),
url <- a(" author: Neil Kutty", href="https://www.twitter.com/neilkutty"),
br(),
helpText('data provided by quantmod'),
br()
)
)
))
runApp('stockprophet')
runApp('stockprophet')
shiny::runApp('stockprophet')
library(shinythemes)
runApp('stockprophet')
library(shinycssloaders)
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
runApp('stockprophet')
?prophet
library(plotly)
library(prophet)
library(quantmod)
#   Get financial data OHLC format  #
symbols <- c('TER','SPOT','TWTR', 'XOM','TSM','BAC')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
m = prophet(dfs, mcmc.samples = 1, interval.width = 2)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs, mcmc.samples = 1, interval.width = 2)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
fplot = ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
plot(m,forecast)
getSymbols(Symbols = symbols, from = '2016-01-01', auto.assign = TRUE)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
m = prophet(dfs,interval.width = .95)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .95)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
plot(m,forecast)
m = prophet(dfs,interval.width = .95, mcmc.samples = 1)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .95, mcmc.samples = 1)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
m = prophet(dfs,interval.width = .5)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .5)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
m = prophet(dfs,interval.width = .05)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .05)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
m = prophet(dfs,interval.width = .25)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .25)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TWTR)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .65)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TWTR)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .43)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TWTR)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .4)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TWTR)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
shiny::runApp('stockprophet')
library(shinythemes)
library(shinycssloaders)
runApp('stockprophet')
shiny::runApp('stockprophet')
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
runApp('stockprophet')
shiny::runApp('stockprophet')
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
shiny::runApp('stockprophet')
runApp('stockprophet')
##  original quantmod rshiny code: http://shiny.rstudio.com/tutorial/lesson6/
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
install.packages('forecast')
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
