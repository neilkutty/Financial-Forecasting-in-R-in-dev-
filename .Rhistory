dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .95)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
plot(m,forecast)
m = prophet(dfs,interval.width = .95, mcmc.samples = 1)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .95, mcmc.samples = 1)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
m = prophet(dfs,interval.width = .5)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .5)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
m = prophet(dfs,interval.width = .05)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .05)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
m = prophet(dfs,interval.width = .25)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .25)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TSM)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TWTR)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .65)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TWTR)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .43)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TWTR)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs,interval.width = .4)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TWTR)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
shiny::runApp('stockprophet')
library(shinythemes)
library(shinycssloaders)
runApp('stockprophet')
shiny::runApp('stockprophet')
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
runApp('stockprophet')
shiny::runApp('stockprophet')
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
shiny::runApp('stockprophet')
runApp('stockprophet')
##  original quantmod rshiny code: http://shiny.rstudio.com/tutorial/lesson6/
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
install.packages('forecast')
library(quantmod)
library(ggplot2)
library(prophet)
library(shinycssloaders)
library(shinythemes)
library(shinythemes)
shiny::runApp('stockprophet')
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
#library(nnfor)
t = getQuote("AAPL", what = yahooQF(c("Symbol", "Name (Long)", "Last Trade (Price Only)"))
)
t = getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Last Trade (Price Only)"))
)
x = t$Last/t$`Market Capitalization`
pmetric = function(stock_symbol){
t = getQuote(stock_symbol, what = yahooQF(c("Market Capitalization",
"Last Trade (Price Only)")))
x = (t$`Market Capitalization`/t$Last)/t$`Market Capitalization`
}
j = pmetric('AAPL')
j = pmetric('TWTR')
j = pmetric('AAPL')
j = pmetric('AMD')
j = pmetric('FB')
runApp('stockprophet')
t = getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Last Trade (Price Only)"))
)
pmetric = function(stock_symbol){
t = getQuote(stock_symbol, what = yahooQF(c("Market Capitalization",
"Last Trade (Price Only)")))
x = (t$`Last`/t$`Market Capitalization`)/t$`Market Capitalization`
}
j = pmetric('FB')
x = (t$`Last`/t$`Market Capitalization`)*t$`Market Capitalization`
pmetric = function(stock_symbol){
t = getQuote(stock_symbol, what = yahooQF(c("Market Capitalization",
"Last Trade (Price Only)")))
x = (t$`Last`/t$`Market Capitalization`)*t$`Market Capitalization`
}
pmetric = function(stock_symbol){
t = getQuote(stock_symbol, what = yahooQF(c("Market Capitalization",
"Last Trade (Price Only)")))
x = (t$`Last`/t$`Market Capitalization`)*t$`Market Capitalization`
}
j = pmetric('FB')
j = pmetric('TWTR')
j = pmetric('BERK')
j = pmetric('BRK.A')
j = pmetric('BRK.A')
j = pmetric('BRK')
t = getQuote("BRK", what = yahooQF(c("Market Capitalization", "Last Trade (Price Only)"))
)
View(t)
pmetric = function(stock_symbol){
t = getQuote(stock_symbol, what = yahooQF(c("Market Capitalization",
"Last Trade (Price Only)")))
x = t$`Last`/(t$`Market Capitalization`/1000000000)
}
j = pmetric('AAPL')
j = pmetric('TWTR')
pmetric = function(stock_symbol){
t = getQuote(stock_symbol, what = yahooQF(c("Market Capitalization",
"Last Trade (Price Only)")))
x = t$`Last`/(t$`Market Capitalization`/10000000)
}
j = pmetric('TWTR')
pmetric = function(stock_symbol){
t = getQuote(stock_symbol, what = yahooQF(c("Market Capitalization",
"Last Trade (Price Only)")))
x = t$`Last`/(t$`Market Capitalization`/100000000)
}
j = pmetric('TWTR')
j = pmetric('AAPL')
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
#library(nnfor)
rm(list=ls())
shiny::runApp('stockprophet')
stock_prices = getSymbols('TWTR', from=as.character(Sys.Date()-200), to=as.character(Sys.Date()))[,4]
stock_prices = getSymbols('TWTR', from=as.character(Sys.Date()-200), to=as.character(Sys.Date()))
View(TWTR)
stock_prices[,4]
stock_prices = getSymbols('TWTR', from=as.character(Sys.Date()-200),
to=as.character(Sys.Date()),
auto.assign = F)
stock_prices[,4]
rm('TWTR')
stock = diff(log(stock_prices[,4]),lag=1)
stock = stock[!is.na(stock)]
plot(stock,type='l', main='log returns plot')
#library(nnfor)
library(tseries)
library(timeSeries)
library(forecast)
library(xts)
install.packages('timeseries')
install.packages('timeSeries')
library(timeSeries)
# Call ADF test on the returns series to check for stationarity
print(adf.test(stock))
par(mfrow = c(1,1))
acf.stock = acf(stock[c(1:breakpoint),], main='ACF Plot', lag.max=100)
pacf.stock = pacf(stock[c(1:breakpoint),], main='PACF Plot', lag.max=100)
# Split data - train test
breakpoint = floor(nrow(stock)*(2.9/3))
par(mfrow = c(1,1))
acf.stock = acf(stock[c(1:breakpoint),], main='ACF Plot', lag.max=100)
pacf.stock = pacf(stock[c(1:breakpoint),], main='PACF Plot', lag.max=100)
Actual_series = xts(0,as.Date("2014-11-25","%Y-%m-%d"))
forecasted_series = data.frame(Forecasted = numeric())
for (b in breakpoint:(nrow(stock)-1)){
stock_train = stock[1:b, ]
stock_test = stock[(b+1):nrow(stock), ]
# Summary of the ARIMA model using the determined (p,d,q) parameters
fit = arima(stock_train, order = c(2, 0, 2),include.mean=FALSE)
summary(fit)
# plotting a acf plot of the residuals
acf(fit$residuals,main="Residuals plot")
# Forecasting the log returns
arima.forecast = forecast.Arima(fit, h = 1,level=99)
summary(arima.forecast)
# plotting the forecast
par(mfrow=c(1,1))
plot(arima.forecast, main = "ARIMA Forecast")
# Creating a series of forecasted returns for the forecasted period
forecasted_series = rbind(forecasted_series,arima.forecast$mean[1])
colnames(forecasted_series) = c("Forecasted")
# Creating a series of actual returns for the forecasted period
Actual_return = stock[(b+1),]
Actual_series = c(Actual_series,xts(Actual_return))
rm(Actual_return)
print(stock_prices[(b+1),])
print(stock_prices[(b+2),])
}
library(forecast)
for (b in breakpoint:(nrow(stock)-1)){
stock_train = stock[1:b, ]
stock_test = stock[(b+1):nrow(stock), ]
# Summary of the ARIMA model using the determined (p,d,q) parameters
fit = arima(stock_train, order = c(2, 0, 2),include.mean=FALSE)
summary(fit)
# plotting a acf plot of the residuals
acf(fit$residuals,main="Residuals plot")
# Forecasting the log returns
arima.forecast = Arima(fit, h = 1,level=99)
summary(arima.forecast)
# plotting the forecast
par(mfrow=c(1,1))
plot(arima.forecast, main = "ARIMA Forecast")
# Creating a series of forecasted returns for the forecasted period
forecasted_series = rbind(forecasted_series,arima.forecast$mean[1])
colnames(forecasted_series) = c("Forecasted")
# Creating a series of actual returns for the forecasted period
Actual_return = stock[(b+1),]
Actual_series = c(Actual_series,xts(Actual_return))
rm(Actual_return)
print(stock_prices[(b+1),])
print(stock_prices[(b+2),])
}
for (b in breakpoint:(nrow(stock)-1)){
stock_train = stock[1:b, ]
stock_test = stock[(b+1):nrow(stock), ]
# Summary of the ARIMA model using the determined (p,d,q) parameters
fit = arima(stock_train, order = c(2, 0, 2),include.mean=FALSE)
summary(fit)
# plotting a acf plot of the residuals
acf(fit$residuals,main="Residuals plot")
# Forecasting the log returns
arima.forecast = forecast(fit, h = 1,level=99)
summary(arima.forecast)
# plotting the forecast
par(mfrow=c(1,1))
plot(arima.forecast, main = "ARIMA Forecast")
# Creating a series of forecasted returns for the forecasted period
forecasted_series = rbind(forecasted_series,arima.forecast$mean[1])
colnames(forecasted_series) = c("Forecasted")
# Creating a series of actual returns for the forecasted period
Actual_return = stock[(b+1),]
Actual_series = c(Actual_series,xts(Actual_return))
rm(Actual_return)
print(stock_prices[(b+1),])
print(stock_prices[(b+2),])
}
decompose(stock)
stock
ts(stock)
x = ts(stock)
decompose(x)
for (b in breakpoint:(nrow(stock)-1)){
stock_train = stock[1:b, ]
stock_test = stock[(b+1):nrow(stock), ]
# Summary of the ARIMA model using the determined (p,d,q) parameters
fit = arima(stock_train, order = c(2, 0, 2),include.mean=FALSE)
summary(fit)
# plotting a acf plot of the residuals
acf(fit$residuals,main="Residuals plot")
# Forecasting the log returns
arima.forecast = forecast(fit, h = 1,level=99)
summary(arima.forecast)
# plotting the forecast
par(mfrow=c(1,1))
plot(arima.forecast, main = "ARIMA Forecast")
# Creating a series of forecasted returns for the forecasted period
forecasted_series = rbind(forecasted_series,arima.forecast$mean[1])
colnames(forecasted_series) = c("Forecasted")
# Creating a series of actual returns for the forecasted period
Actual_return = stock[(b+1),]
Actual_series = c(Actual_series,xts(Actual_return))
rm(Actual_return)
print(stock_prices[(b+1),])
print(stock_prices[(b+2),])
}
plot(forecasted_series)
View(Actual_series)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
#library(nnfor)
library(tseries)
library(timeSeries)
library(forecast)
library(xts)
stock_prices = getSymbols('TWTR', from=as.character(Sys.Date()-200),
to=as.character(Sys.Date()),
auto.assign = F)
stock = diff(log(stock_prices[,4]),lag=1)
stock = stock[!is.na(stock)]
plot(stock,type='l', main='log returns plot')
shiny::runApp()
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
shiny::runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
stock_prices = getSymbols('TWTR', from=as.character(Sys.Date()-200),
to=as.character(Sys.Date()),
auto.assign = F)
stock = diff(log(stock_prices[,4]),lag=1)
stock = stock[!is.na(stock)]
plot(stock,type='l', main='log returns plot')
# Call ADF test on the returns series to check for stationarity
print(adf.test(stock))
library(forecast)
# Call ADF test on the returns series to check for stationarity
print(adf.test(stock))
#library(nnfor)
library(tseries)
library(timeSeries)
# Call ADF test on the returns series to check for stationarity
print(adf.test(stock))
runApp('stockprophet')
runApp('stockprophet')
# -- -- -- -- --  <<<<<<  testing ARIMA  >>>>>> -- -- -- -- -- -- #
# -- -- -- -- --  <<<<<<  testing ARIMA  >>>>>> -- -- -- -- -- -- #
# -- -- -- -- --  <<<<<<  testing ARIMA  >>>>>> -- -- -- -- -- -- #
fit = arima(stock,order = c(2, 0, 2),include.mean=FALSE)
summary(fit)
shiny::runApp('stockprophet')
View(acf.stock)
View(acf.stock)
View(acf.stock)
View(Actual_series)
shiny::runApp('stockprophet')
#------------------------------------------------------------------------------------ /
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
symbol = getSymbols(symbol, from = from, auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs, symbol)
return(the_list)
}
#------------------------------------------------------------------------------------ \
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('NVDA', '2015-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
plot(m,forecast)
rm(list=ls())
shiny::runApp('stockprophet')
# - **************************************************************************
#library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
#library(nnfor)
library(tseries)
library(timeSeries)
library(forecast)
library(xts)
stock_prices = getSymbols('TWTR', from=as.character(Sys.Date()-200),
to=as.character(Sys.Date()),
auto.assign = F)
View(stock_prices)
stock = diff(log(stock_prices[,4]),lag=1)
stock = stock[!is.na(stock)]
plot(stock,type='l', main='log returns plot')
