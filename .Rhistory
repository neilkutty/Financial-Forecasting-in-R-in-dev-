dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m,forecast)
shiny::runApp()
library(Quandl)
library(Quandl)
Quandl('USTREASURY/REALLONGTERM', start_date='2019-04-11', end_date='2019-04-11')
library(Quandl)
Quandl('USTREASURY/REALLONGTERM', start_date='2019-04-11', end_date='2019-04-11')
Quandl('USTREASURY/REALLONGTERM', start_date='2019-04-11', end_date='2019-04-11')
Quandl('USTREASURY/REALYIELD', start_date='2019-04-11', end_date='2019-04-11')
Quandl('USTREASURY/REALYIELD', start_date='2018-04-11', end_date='2019-04-11')
Quandl('USTREASURY/REALYIELD', start_date='2018-04-11', end_date='2019-04-11')
rm(list=ls())
Quandl('USTREASURY/REALYIELD', start_date='2018-04-11', end_date='2019-04-11')
x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11', end_date='2019-04-11')
View(x)
symbols <- c('TER','SPOT','TWTR', 'XOM')
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
library(quantmod)
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
Ter
TER
chartSeries(NVDA, subset = 'last 3 months')
# # # #     NON-FUNCTIONALIZED
#-------------------------------------------------------------
# df <- data.frame(Date=as.POSIXct(index(TER)),coredata(TER))
# dfs = df[,c(1,4)]
# colnames(dfs) = c('ds','y')
# m = prophet(dfs)
# future = make_future_dataframe(m, periods = 365)
# forecast <- predict(m, future)
# tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
#--------------------------------------------------------------------------------------- |
myPars <- chart_pars()
myPars$mar <- c(3, 2, 0, .2) # default is c(3, 1, 0, 1)  # bottom, left, top, right
myPars$cex <- 1.5 #' Increase font size of both x and y axis scale ticks
mychartTheme <- chart_theme()
mychartTheme$
mychartTheme$rylab = FALSE  #' Don't show y-axis on right side of plot to save space
# mychartTheme$lylab = TRUE  #' Show y-axis ticks on left side of plot?  Default is TRUE for both left and right sides.
chart1 <- chart_Series(TWTR, pars=myPars)#,theme =  mychartTheme)
chart1
chartSeries(NVDA, subset = 'last 3 months')
symbols <- c('TER','SPOT','TWTR', 'XOM', 'NVDA')
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(nnfor)
x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11', end_date='2019-04-11')
x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11', end_date='2019-04-11')
View(x)
x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11')
??tensorflow
tariffs = c("TSN",
"GM",
"F",
"KO",
'WHR',
"AA",
"QCOM")
rm(list=ls())
getSymbols(Symbols = tariffs, from = '2013-01-01', auto.assign = TRUE)
library(plotly)
library(prophet)
library(quantmod)
getSymbols(Symbols = tariffs, from = '2013-01-01', auto.assign = TRUE)
tariffs = c("TSN",
"GM",
"F",
"KO",
'WHR',
"AA",
"QCOM")
getSymbols(Symbols = tariffs, from = '2013-01-01', auto.assign = TRUE)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(AA)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
#install.packages('infotheo)
library(infotheo)
install.packages('infotheo')
#install.packages('infotheo)
library(infotheo)
#install.packages('caret')
library(caret)
#install.packages('quantmod)
library(quantmod)
# get market data
getSymbols(c("^GSPC"))
View(GSPC)
# transfer market data to a simple data frame
GSPC <- data.frame(GSPC)
# extract the date row name into a date column
GSPC$Close.Date <- row.names(GSPC)
# take random sets of sequential rows
new_set <- c()
for (row_set in seq(10000)) {
row_quant <- sample(10:30, 1)
print(row_quant)
row_start <- sample(1:(nrow(GSPC) - row_quant), 1)
market_subset <- GSPC[row_start:(row_start + row_quant),]
market_subset <- dplyr::mutate(market_subset,
Close_Date = max(market_subset$Close.Date),
Close_Gap=(GSPC.Close - lag(GSPC.Close))/lag(GSPC.Close) ,
High_Gap=(GSPC.High - lag(GSPC.High))/lag(GSPC.High) ,
Low_Gap=(GSPC.Low - lag(GSPC.Low))/lag(GSPC.Low),
Volume_Gap=(GSPC.Volume - lag(GSPC.Volume))/lag(GSPC.Volume),
Daily_Change=(GSPC.Close - GSPC.Open)/GSPC.Open,
Outcome_Next_Day_Direction= (lead(GSPC.Volume)-GSPC.Volume)) %>%
dplyr::select(-GSPC.Open, -GSPC.High, -GSPC.Low, -GSPC.Close, -GSPC.Volume, -GSPC.Adjusted, -Close.Date) %>%
na.omit
market_subset$Sequence_ID <- row_set
new_set <- rbind(new_set, market_subset)
}
# Close_Gap
range(new_set$Close_Gap)
data_dicretized <- discretize(new_set$Close_Gap, disc="equalfreq", nbins=3)
new_set$Close_Gap <- data_dicretized$X
new_set$Close_Gap_LMH <- ifelse(new_set$Close_Gap == 1, 'L',
ifelse(new_set$Close_Gap ==2, 'M','H'))
# Volume_Gap
range(new_set$Volume_Gap)
data_dicretized <- discretize(new_set$Volume_Gap, disc="equalfreq", nbins=3)
new_set$Volume_Gap <- data_dicretized$X
new_set$Volume_Gap_LMH <- ifelse(new_set$Volume_Gap == 1, 'L',
ifelse(new_set$Volume_Gap ==2, 'M','H'))
# Daily_Change
range(new_set$Daily_Change)
data_dicretized <- discretize(new_set$Daily_Change, disc="equalfreq", nbins=3)
new_set$Daily_Change <- data_dicretized$X
new_set$Daily_Change_LMH <- ifelse(new_set$Daily_Change == 1, 'L',
ifelse(new_set$Daily_Change ==2, 'M','H'))
# new set
new_set <- new_set[,c("Sequence_ID", "Close_Date", "Close_Gap_LMH", "Volume_Gap_LMH", "Daily_Change_LMH", "Outcome_Next_Day_Direction")]
new_set$Event_Pattern <- paste0(new_set$Close_Gap_LMH,
new_set$Volume_Gap_LMH,
new_set$Daily_Change_LMH)
# reduce set
compressed_set <- dplyr::group_by(new_set, Sequence_ID, Close_Date) %>%
dplyr::summarize(Event_Pattern = paste(Event_Pattern, collapse = ",")) %>%
data.frame
compressed_set <- merge(x=compressed_set,y=dplyr::select(new_set, Sequence_ID, Outcome_Next_Day_Direction) %>%
dplyr::group_by(Sequence_ID) %>%
dplyr::slice(n()) %>%
dplyr::distinct(Sequence_ID), by='Sequence_ID')
# use last x days of data for validation
library(dplyr)
compressed_set_validation <- dplyr::filter(compressed_set, Close_Date >= Sys.Date()-90)
compressed_set <- dplyr::filter(compressed_set, Close_Date < Sys.Date()-90)
dim(compressed_set)
compressed_set <- dplyr::select(compressed_set, -Close_Date)
compressed_set_validation <- dplyr::select(compressed_set_validation, -Close_Date)
# only keep big moves
summary(compressed_set$Outcome_Next_Day_Direction)
compressed_set <- compressed_set[abs(compressed_set$Outcome_Next_Day_Direction) > 5260500,]
compressed_set$Outcome_Next_Day_Direction <- ifelse(compressed_set$Outcome_Next_Day_Direction > 0, 1, 0)
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(nnfor)
x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11')
symbols <- c('TER','SPOT','TWTR', 'XOM', 'NVDA')
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
rm(ls())
rm(list=ls())
future = make_future_dataframe(m, periods = 720)
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(nnfor)
x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11')
symbols <- c('TER','SPOT','TWTR', 'XOM', 'NVDA')
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TER)
m = x[[1]]
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(nnfor)
x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11')
symbols <- c('NKE','SPOT','TWTR', 'XOM', 'NVDA')
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(NVDA)
library(prophet)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(NVDA)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
symbols <- c('NKE','SPOT','TWTR', 'XOM', 'NVDA', 'TER', 'BAC')
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
getSymbols('BAC', from = '1990-01-01', auto.assign = TRUE)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
getSymbols('NVDA', from = '1990-01-01', auto.assign = TRUE)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(NVDA)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
install.packages(c("nnfor", "prophet", "Quandl", "quantmod"))
install.packages(c("prophet", "quantmod"))
library(prophet)
install.packages('prophet')
library(prophet)
library(prophet)
library(quantmod)
symbols <- c('TER','SPOT','TWTR', 'NKE')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
df <- data.frame(Date=as.POSIXct(index(NKE)),coredata(NKE))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m,forecast)
View(df)
View(NKE)
View(NVDA)
View(SPOT)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(NVDA)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
plot(m,forecast)
View(forecast)
library(ggplot2)
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
rm(list=ls())
shiny::runApp()
library(plotly)
library(prophet)
library(quantmod)
#   Get financial data OHLC format  #
symbols <- c('TER','SPOT','TWTR', 'XOM','TSM','BAC')
getSymbols('BAC', from = '1990-01-01', auto.assign = TRUE)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
#basic plot
plot(m,forecast)
forecast <- predict(m, future)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
getSymbols?
?getsymbols
?getSymbols
rm(list=ls())
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
symbol = getSymbols(paste0("'",symbol,"'"), from = '2017-01-01', auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(prophet)
library(nnfor)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC')
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC')
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
symbol = getSymbols(symbol, from = '2017-01-01', auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
symbol = getSymbols(symbol, from = '2017-01-01', auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC')
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2019-01-01')
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
symbol = getSymbols(symbol, from = from, auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2019-01-01')
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
symbol = getSymbols(symbol, from = from, auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs, symbol)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2019-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
View(stock)
View(m)
View(forecast)
View(forecast)
View(dfs)
View(dfs)
View(forecast)
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(prophet)
library(nnfor)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
symbol = getSymbols(symbol, from = from, auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs, symbol)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2018-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
plot(m,forecast)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2015-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
plot(m,forecast)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('NVDA', '2015-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
plot(m,forecast)
ggp = ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
ggp
library(plotly)
library(plotly)
ggplotly(ggp)
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
library(nnfor)
