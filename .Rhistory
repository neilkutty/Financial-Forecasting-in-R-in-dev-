x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11')
symbols <- c('TER','SPOT','TWTR', 'XOM', 'NVDA')
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
rm(ls())
rm(list=ls())
future = make_future_dataframe(m, periods = 720)
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(nnfor)
x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11')
symbols <- c('TER','SPOT','TWTR', 'XOM', 'NVDA')
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(TER)
m = x[[1]]
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(nnfor)
x=Quandl('USTREASURY/REALYIELD', start_date='2018-04-11')
symbols <- c('NKE','SPOT','TWTR', 'XOM', 'NVDA')
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(NVDA)
library(prophet)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(NVDA)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
symbols <- c('NKE','SPOT','TWTR', 'XOM', 'NVDA', 'TER', 'BAC')
# AAPL_f = getFinancials('AAPL')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
getSymbols('BAC', from = '1990-01-01', auto.assign = TRUE)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
getSymbols('NVDA', from = '1990-01-01', auto.assign = TRUE)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(NVDA)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
install.packages(c("nnfor", "prophet", "Quandl", "quantmod"))
install.packages(c("prophet", "quantmod"))
library(prophet)
install.packages('prophet')
library(prophet)
library(prophet)
library(quantmod)
symbols <- c('TER','SPOT','TWTR', 'NKE')
getSymbols(Symbols = symbols, from = '2013-01-01', auto.assign = TRUE)
df <- data.frame(Date=as.POSIXct(index(NKE)),coredata(NKE))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m,forecast)
View(df)
View(NKE)
View(NVDA)
View(SPOT)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(NVDA)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
plot(m,forecast)
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
plot(m,forecast)
View(forecast)
library(ggplot2)
ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
rm(list=ls())
shiny::runApp()
library(plotly)
library(prophet)
library(quantmod)
#   Get financial data OHLC format  #
symbols <- c('TER','SPOT','TWTR', 'XOM','TSM','BAC')
getSymbols('BAC', from = '1990-01-01', auto.assign = TRUE)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
#basic plot
plot(m,forecast)
forecast <- predict(m, future)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
getSymbols?
?getsymbols
?getSymbols
rm(list=ls())
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
symbol = getSymbols(paste0("'",symbol,"'"), from = '2017-01-01', auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(prophet)
library(nnfor)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC')
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC')
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
symbol = getSymbols(symbol, from = '2017-01-01', auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
symbol = getSymbols(symbol, from = '2017-01-01', auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC')
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2019-01-01')
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
symbol = getSymbols(symbol, from = from, auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2019-01-01')
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
symbol = getSymbols(symbol, from = from, auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs, symbol)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2019-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
View(stock)
View(m)
View(forecast)
View(forecast)
View(dfs)
View(dfs)
View(forecast)
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(ggplot2)
library(prophet)
library(nnfor)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol, from){
symbol = getSymbols(symbol, from = from, auto.assign = F)
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs, symbol)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2018-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
plot(m,forecast)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('BAC', '2015-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
plot(m,forecast)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet('NVDA', '2015-01-01')
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
stock = x[[4]]
plot(m,forecast)
ggp = ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
ggp
library(plotly)
library(plotly)
ggplotly(ggp)
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
library(nnfor)
#Define function to run prophet on a Stock ------------------------------------------ |
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
library(plotly)
library(prophet)
library(quantmod)
**************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
# - **************************************************************************
library(Quandl)
library(quantmod)
library(dplyr)
library(plotly)
library(ggplot2)
library(prophet)
#library(nnfor)
getSymbols('BAC', from = '2001-01-01', auto.assign = TRUE)
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
# --- Run Prophet model on a stock and plot the forecast and actual
x = run_prophet(BAC)
m = x[[1]]
forecast = x[[2]]
dfs = x[[3]]
#ggplot version
fplot = ggplot(forecast, aes(x = ds, y=trend))+
geom_line(stat = 'identity') +
geom_point(data = dfs, aes(x = ds, y = y))
#basic plot
plot(m,forecast)
View(stock)
source('fxsource.R')
source('fxsource.R')
source('fxsource.R')
library(quantmod)
library(Quandl)
library(ggplot2)
library(prophet)
source('fxsource.R')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
#Source
library(prophet)
run_prophet = function(symbol){
df <- data.frame(Date=as.POSIXct(index(symbol)),coredata(symbol))
dfs = df[,c(1,4)]
colnames(dfs) = c('ds','y')
m = prophet(dfs)
future = make_future_dataframe(m, periods = 720)
forecast <- predict(m, future)
the_list = list(m, forecast, dfs)
return(the_list)
}
shiny::runApp()
runApp()
runApp()
rm(list=ls())
shiny::runApp()
library(shinycssloaders)
withSpinner()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
shiny::runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
shiny::runApp('stockprophet')
shiny::runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
shiny::runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
shiny::runApp('stockprophet')
runApp('stockprophet')
getFinancials(TWTR)
yahooQF('TWTR')
yahooQF(TWTR)
getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Earnings/Share",
+                                 "P/E Ratio", "Book Value", "EBITDA",
+                                 "Price/Book")))
getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Earnings/Share")))
library(quantmod)
AAPL_Qt = getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Earnings/Share")))
AAPL_Qt = getQuote("AAPL", what = yahooQF(c("Market Capitalization", "Earnings/Share",
"P/E Ratio", "Book Value", "EBITDA",
"Price/Book")))
View(AAPL_Qt)
#List of fundamentals available
yahooQF()
shiny::runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
AAPL_Qt
as.data.frame(AAPL_Qt)
as.data.frame(AAPL_Qt)[,1]
as.data.frame(AAPL_Qt)[2,1]
as.data.frame(AAPL_Qt)[2,]
as.data.frame(AAPL_Qt)[,2]
head(as.data.frame(AAPL_Qt))
shiny::runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp()
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
runApp('stockprophet')
